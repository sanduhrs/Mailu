# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Token(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, created_at: str=None, updated_at: str=None, comment: str=None, id: int=None, user_email: str=None, password: str=None, ip: str=None):  # noqa: E501
        """Token - a model defined in Swagger

        :param created_at: The created_at of this Token.  # noqa: E501
        :type created_at: str
        :param updated_at: The updated_at of this Token.  # noqa: E501
        :type updated_at: str
        :param comment: The comment of this Token.  # noqa: E501
        :type comment: str
        :param id: The id of this Token.  # noqa: E501
        :type id: int
        :param user_email: The user_email of this Token.  # noqa: E501
        :type user_email: str
        :param password: The password of this Token.  # noqa: E501
        :type password: str
        :param ip: The ip of this Token.  # noqa: E501
        :type ip: str
        """
        self.swagger_types = {
            'created_at': str,
            'updated_at': str,
            'comment': str,
            'id': int,
            'user_email': str,
            'password': str,
            'ip': str
        }

        self.attribute_map = {
            'created_at': 'created_at',
            'updated_at': 'updated_at',
            'comment': 'comment',
            'id': 'id',
            'user_email': 'user_email',
            'password': 'password',
            'ip': 'ip'
        }

        self._created_at = created_at
        self._updated_at = updated_at
        self._comment = comment
        self._id = id
        self._user_email = user_email
        self._password = password
        self._ip = ip

    @classmethod
    def from_dict(cls, dikt) -> 'Token':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The token of this Token.  # noqa: E501
        :rtype: Token
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self) -> str:
        """Gets the created_at of this Token.


        :return: The created_at of this Token.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: str):
        """Sets the created_at of this Token.


        :param created_at: The created_at of this Token.
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def updated_at(self) -> str:
        """Gets the updated_at of this Token.


        :return: The updated_at of this Token.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at: str):
        """Sets the updated_at of this Token.


        :param updated_at: The updated_at of this Token.
        :type updated_at: str
        """

        self._updated_at = updated_at

    @property
    def comment(self) -> str:
        """Gets the comment of this Token.


        :return: The comment of this Token.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment: str):
        """Sets the comment of this Token.


        :param comment: The comment of this Token.
        :type comment: str
        """

        self._comment = comment

    @property
    def id(self) -> int:
        """Gets the id of this Token.


        :return: The id of this Token.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Token.


        :param id: The id of this Token.
        :type id: int
        """

        self._id = id

    @property
    def user_email(self) -> str:
        """Gets the user_email of this Token.


        :return: The user_email of this Token.
        :rtype: str
        """
        return self._user_email

    @user_email.setter
    def user_email(self, user_email: str):
        """Sets the user_email of this Token.


        :param user_email: The user_email of this Token.
        :type user_email: str
        """

        self._user_email = user_email

    @property
    def password(self) -> str:
        """Gets the password of this Token.


        :return: The password of this Token.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password: str):
        """Sets the password of this Token.


        :param password: The password of this Token.
        :type password: str
        """

        self._password = password

    @property
    def ip(self) -> str:
        """Gets the ip of this Token.


        :return: The ip of this Token.
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip: str):
        """Sets the ip of this Token.


        :param ip: The ip of this Token.
        :type ip: str
        """

        self._ip = ip
