# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class User(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, created_at: str=None, updated_at: str=None, comment: str=None, localpart: str=None, password: str=None, quota_bytes: int=None, global_admin: bool=None, enable_imap: bool=None, enable_pop: bool=None, forward_enabled: bool=None, forward_destination: str=None, reply_enabled: bool=None, reply_subject: str=None, reply_body: str=None, displayed_name: str=None, spam_enabled: bool=None, domain_name: str=None, email: str=None, spam_threshold: int=None, forward_keep: bool=None):  # noqa: E501
        """User - a model defined in Swagger

        :param created_at: The created_at of this User.  # noqa: E501
        :type created_at: str
        :param updated_at: The updated_at of this User.  # noqa: E501
        :type updated_at: str
        :param comment: The comment of this User.  # noqa: E501
        :type comment: str
        :param localpart: The localpart of this User.  # noqa: E501
        :type localpart: str
        :param password: The password of this User.  # noqa: E501
        :type password: str
        :param quota_bytes: The quota_bytes of this User.  # noqa: E501
        :type quota_bytes: int
        :param global_admin: The global_admin of this User.  # noqa: E501
        :type global_admin: bool
        :param enable_imap: The enable_imap of this User.  # noqa: E501
        :type enable_imap: bool
        :param enable_pop: The enable_pop of this User.  # noqa: E501
        :type enable_pop: bool
        :param forward_enabled: The forward_enabled of this User.  # noqa: E501
        :type forward_enabled: bool
        :param forward_destination: The forward_destination of this User.  # noqa: E501
        :type forward_destination: str
        :param reply_enabled: The reply_enabled of this User.  # noqa: E501
        :type reply_enabled: bool
        :param reply_subject: The reply_subject of this User.  # noqa: E501
        :type reply_subject: str
        :param reply_body: The reply_body of this User.  # noqa: E501
        :type reply_body: str
        :param displayed_name: The displayed_name of this User.  # noqa: E501
        :type displayed_name: str
        :param spam_enabled: The spam_enabled of this User.  # noqa: E501
        :type spam_enabled: bool
        :param domain_name: The domain_name of this User.  # noqa: E501
        :type domain_name: str
        :param email: The email of this User.  # noqa: E501
        :type email: str
        :param spam_threshold: The spam_threshold of this User.  # noqa: E501
        :type spam_threshold: int
        :param forward_keep: The forward_keep of this User.  # noqa: E501
        :type forward_keep: bool
        """
        self.swagger_types = {
            'created_at': str,
            'updated_at': str,
            'comment': str,
            'localpart': str,
            'password': str,
            'quota_bytes': int,
            'global_admin': bool,
            'enable_imap': bool,
            'enable_pop': bool,
            'forward_enabled': bool,
            'forward_destination': str,
            'reply_enabled': bool,
            'reply_subject': str,
            'reply_body': str,
            'displayed_name': str,
            'spam_enabled': bool,
            'domain_name': str,
            'email': str,
            'spam_threshold': int,
            'forward_keep': bool
        }

        self.attribute_map = {
            'created_at': 'created_at',
            'updated_at': 'updated_at',
            'comment': 'comment',
            'localpart': 'localpart',
            'password': 'password',
            'quota_bytes': 'quota_bytes',
            'global_admin': 'global_admin',
            'enable_imap': 'enable_imap',
            'enable_pop': 'enable_pop',
            'forward_enabled': 'forward_enabled',
            'forward_destination': 'forward_destination',
            'reply_enabled': 'reply_enabled',
            'reply_subject': 'reply_subject',
            'reply_body': 'reply_body',
            'displayed_name': 'displayed_name',
            'spam_enabled': 'spam_enabled',
            'domain_name': 'domain_name',
            'email': 'email',
            'spam_threshold': 'spam_threshold',
            'forward_keep': 'forward_keep'
        }

        self._created_at = created_at
        self._updated_at = updated_at
        self._comment = comment
        self._localpart = localpart
        self._password = password
        self._quota_bytes = quota_bytes
        self._global_admin = global_admin
        self._enable_imap = enable_imap
        self._enable_pop = enable_pop
        self._forward_enabled = forward_enabled
        self._forward_destination = forward_destination
        self._reply_enabled = reply_enabled
        self._reply_subject = reply_subject
        self._reply_body = reply_body
        self._displayed_name = displayed_name
        self._spam_enabled = spam_enabled
        self._domain_name = domain_name
        self._email = email
        self._spam_threshold = spam_threshold
        self._forward_keep = forward_keep

    @classmethod
    def from_dict(cls, dikt) -> 'User':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The user of this User.  # noqa: E501
        :rtype: User
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self) -> str:
        """Gets the created_at of this User.


        :return: The created_at of this User.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: str):
        """Sets the created_at of this User.


        :param created_at: The created_at of this User.
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def updated_at(self) -> str:
        """Gets the updated_at of this User.


        :return: The updated_at of this User.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at: str):
        """Sets the updated_at of this User.


        :param updated_at: The updated_at of this User.
        :type updated_at: str
        """

        self._updated_at = updated_at

    @property
    def comment(self) -> str:
        """Gets the comment of this User.


        :return: The comment of this User.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment: str):
        """Sets the comment of this User.


        :param comment: The comment of this User.
        :type comment: str
        """

        self._comment = comment

    @property
    def localpart(self) -> str:
        """Gets the localpart of this User.


        :return: The localpart of this User.
        :rtype: str
        """
        return self._localpart

    @localpart.setter
    def localpart(self, localpart: str):
        """Sets the localpart of this User.


        :param localpart: The localpart of this User.
        :type localpart: str
        """

        self._localpart = localpart

    @property
    def password(self) -> str:
        """Gets the password of this User.


        :return: The password of this User.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password: str):
        """Sets the password of this User.


        :param password: The password of this User.
        :type password: str
        """

        self._password = password

    @property
    def quota_bytes(self) -> int:
        """Gets the quota_bytes of this User.


        :return: The quota_bytes of this User.
        :rtype: int
        """
        return self._quota_bytes

    @quota_bytes.setter
    def quota_bytes(self, quota_bytes: int):
        """Sets the quota_bytes of this User.


        :param quota_bytes: The quota_bytes of this User.
        :type quota_bytes: int
        """

        self._quota_bytes = quota_bytes

    @property
    def global_admin(self) -> bool:
        """Gets the global_admin of this User.


        :return: The global_admin of this User.
        :rtype: bool
        """
        return self._global_admin

    @global_admin.setter
    def global_admin(self, global_admin: bool):
        """Sets the global_admin of this User.


        :param global_admin: The global_admin of this User.
        :type global_admin: bool
        """

        self._global_admin = global_admin

    @property
    def enable_imap(self) -> bool:
        """Gets the enable_imap of this User.


        :return: The enable_imap of this User.
        :rtype: bool
        """
        return self._enable_imap

    @enable_imap.setter
    def enable_imap(self, enable_imap: bool):
        """Sets the enable_imap of this User.


        :param enable_imap: The enable_imap of this User.
        :type enable_imap: bool
        """

        self._enable_imap = enable_imap

    @property
    def enable_pop(self) -> bool:
        """Gets the enable_pop of this User.


        :return: The enable_pop of this User.
        :rtype: bool
        """
        return self._enable_pop

    @enable_pop.setter
    def enable_pop(self, enable_pop: bool):
        """Sets the enable_pop of this User.


        :param enable_pop: The enable_pop of this User.
        :type enable_pop: bool
        """

        self._enable_pop = enable_pop

    @property
    def forward_enabled(self) -> bool:
        """Gets the forward_enabled of this User.


        :return: The forward_enabled of this User.
        :rtype: bool
        """
        return self._forward_enabled

    @forward_enabled.setter
    def forward_enabled(self, forward_enabled: bool):
        """Sets the forward_enabled of this User.


        :param forward_enabled: The forward_enabled of this User.
        :type forward_enabled: bool
        """

        self._forward_enabled = forward_enabled

    @property
    def forward_destination(self) -> str:
        """Gets the forward_destination of this User.


        :return: The forward_destination of this User.
        :rtype: str
        """
        return self._forward_destination

    @forward_destination.setter
    def forward_destination(self, forward_destination: str):
        """Sets the forward_destination of this User.


        :param forward_destination: The forward_destination of this User.
        :type forward_destination: str
        """

        self._forward_destination = forward_destination

    @property
    def reply_enabled(self) -> bool:
        """Gets the reply_enabled of this User.


        :return: The reply_enabled of this User.
        :rtype: bool
        """
        return self._reply_enabled

    @reply_enabled.setter
    def reply_enabled(self, reply_enabled: bool):
        """Sets the reply_enabled of this User.


        :param reply_enabled: The reply_enabled of this User.
        :type reply_enabled: bool
        """

        self._reply_enabled = reply_enabled

    @property
    def reply_subject(self) -> str:
        """Gets the reply_subject of this User.


        :return: The reply_subject of this User.
        :rtype: str
        """
        return self._reply_subject

    @reply_subject.setter
    def reply_subject(self, reply_subject: str):
        """Sets the reply_subject of this User.


        :param reply_subject: The reply_subject of this User.
        :type reply_subject: str
        """

        self._reply_subject = reply_subject

    @property
    def reply_body(self) -> str:
        """Gets the reply_body of this User.


        :return: The reply_body of this User.
        :rtype: str
        """
        return self._reply_body

    @reply_body.setter
    def reply_body(self, reply_body: str):
        """Sets the reply_body of this User.


        :param reply_body: The reply_body of this User.
        :type reply_body: str
        """

        self._reply_body = reply_body

    @property
    def displayed_name(self) -> str:
        """Gets the displayed_name of this User.


        :return: The displayed_name of this User.
        :rtype: str
        """
        return self._displayed_name

    @displayed_name.setter
    def displayed_name(self, displayed_name: str):
        """Sets the displayed_name of this User.


        :param displayed_name: The displayed_name of this User.
        :type displayed_name: str
        """

        self._displayed_name = displayed_name

    @property
    def spam_enabled(self) -> bool:
        """Gets the spam_enabled of this User.


        :return: The spam_enabled of this User.
        :rtype: bool
        """
        return self._spam_enabled

    @spam_enabled.setter
    def spam_enabled(self, spam_enabled: bool):
        """Sets the spam_enabled of this User.


        :param spam_enabled: The spam_enabled of this User.
        :type spam_enabled: bool
        """

        self._spam_enabled = spam_enabled

    @property
    def domain_name(self) -> str:
        """Gets the domain_name of this User.


        :return: The domain_name of this User.
        :rtype: str
        """
        return self._domain_name

    @domain_name.setter
    def domain_name(self, domain_name: str):
        """Sets the domain_name of this User.


        :param domain_name: The domain_name of this User.
        :type domain_name: str
        """

        self._domain_name = domain_name

    @property
    def email(self) -> str:
        """Gets the email of this User.


        :return: The email of this User.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: str):
        """Sets the email of this User.


        :param email: The email of this User.
        :type email: str
        """

        self._email = email

    @property
    def spam_threshold(self) -> int:
        """Gets the spam_threshold of this User.


        :return: The spam_threshold of this User.
        :rtype: int
        """
        return self._spam_threshold

    @spam_threshold.setter
    def spam_threshold(self, spam_threshold: int):
        """Sets the spam_threshold of this User.


        :param spam_threshold: The spam_threshold of this User.
        :type spam_threshold: int
        """

        self._spam_threshold = spam_threshold

    @property
    def forward_keep(self) -> bool:
        """Gets the forward_keep of this User.


        :return: The forward_keep of this User.
        :rtype: bool
        """
        return self._forward_keep

    @forward_keep.setter
    def forward_keep(self, forward_keep: bool):
        """Sets the forward_keep of this User.


        :param forward_keep: The forward_keep of this User.
        :type forward_keep: bool
        """

        self._forward_keep = forward_keep
