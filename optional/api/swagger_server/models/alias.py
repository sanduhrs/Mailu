# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Alias(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, created_at: str=None, updated_at: str=None, comment: str=None, localpart: str=None, destination: str=None, domain_name: str=None, email: str=None, wildcard: bool=None):  # noqa: E501
        """Alias - a model defined in Swagger

        :param created_at: The created_at of this Alias.  # noqa: E501
        :type created_at: str
        :param updated_at: The updated_at of this Alias.  # noqa: E501
        :type updated_at: str
        :param comment: The comment of this Alias.  # noqa: E501
        :type comment: str
        :param localpart: The localpart of this Alias.  # noqa: E501
        :type localpart: str
        :param destination: The destination of this Alias.  # noqa: E501
        :type destination: str
        :param domain_name: The domain_name of this Alias.  # noqa: E501
        :type domain_name: str
        :param email: The email of this Alias.  # noqa: E501
        :type email: str
        :param wildcard: The wildcard of this Alias.  # noqa: E501
        :type wildcard: bool
        """
        self.swagger_types = {
            'created_at': str,
            'updated_at': str,
            'comment': str,
            'localpart': str,
            'destination': str,
            'domain_name': str,
            'email': str,
            'wildcard': bool
        }

        self.attribute_map = {
            'created_at': 'created_at',
            'updated_at': 'updated_at',
            'comment': 'comment',
            'localpart': 'localpart',
            'destination': 'destination',
            'domain_name': 'domain_name',
            'email': 'email',
            'wildcard': 'wildcard'
        }

        self._created_at = created_at
        self._updated_at = updated_at
        self._comment = comment
        self._localpart = localpart
        self._destination = destination
        self._domain_name = domain_name
        self._email = email
        self._wildcard = wildcard

    @classmethod
    def from_dict(cls, dikt) -> 'Alias':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The alias of this Alias.  # noqa: E501
        :rtype: Alias
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self) -> str:
        """Gets the created_at of this Alias.


        :return: The created_at of this Alias.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: str):
        """Sets the created_at of this Alias.


        :param created_at: The created_at of this Alias.
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def updated_at(self) -> str:
        """Gets the updated_at of this Alias.


        :return: The updated_at of this Alias.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at: str):
        """Sets the updated_at of this Alias.


        :param updated_at: The updated_at of this Alias.
        :type updated_at: str
        """

        self._updated_at = updated_at

    @property
    def comment(self) -> str:
        """Gets the comment of this Alias.


        :return: The comment of this Alias.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment: str):
        """Sets the comment of this Alias.


        :param comment: The comment of this Alias.
        :type comment: str
        """

        self._comment = comment

    @property
    def localpart(self) -> str:
        """Gets the localpart of this Alias.


        :return: The localpart of this Alias.
        :rtype: str
        """
        return self._localpart

    @localpart.setter
    def localpart(self, localpart: str):
        """Sets the localpart of this Alias.


        :param localpart: The localpart of this Alias.
        :type localpart: str
        """

        self._localpart = localpart

    @property
    def destination(self) -> str:
        """Gets the destination of this Alias.


        :return: The destination of this Alias.
        :rtype: str
        """
        return self._destination

    @destination.setter
    def destination(self, destination: str):
        """Sets the destination of this Alias.


        :param destination: The destination of this Alias.
        :type destination: str
        """

        self._destination = destination

    @property
    def domain_name(self) -> str:
        """Gets the domain_name of this Alias.


        :return: The domain_name of this Alias.
        :rtype: str
        """
        return self._domain_name

    @domain_name.setter
    def domain_name(self, domain_name: str):
        """Sets the domain_name of this Alias.


        :param domain_name: The domain_name of this Alias.
        :type domain_name: str
        """

        self._domain_name = domain_name

    @property
    def email(self) -> str:
        """Gets the email of this Alias.


        :return: The email of this Alias.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: str):
        """Sets the email of this Alias.


        :param email: The email of this Alias.
        :type email: str
        """

        self._email = email

    @property
    def wildcard(self) -> bool:
        """Gets the wildcard of this Alias.


        :return: The wildcard of this Alias.
        :rtype: bool
        """
        return self._wildcard

    @wildcard.setter
    def wildcard(self, wildcard: bool):
        """Sets the wildcard of this Alias.


        :param wildcard: The wildcard of this Alias.
        :type wildcard: bool
        """

        self._wildcard = wildcard
