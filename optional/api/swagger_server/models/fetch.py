# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Fetch(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, created_at: str=None, updated_at: str=None, comment: str=None, id: int=None, user_email: str=None, protocol: str=None, host: str=None, port: int=None, tls: bool=None, username: str=None, password: str=None):  # noqa: E501
        """Fetch - a model defined in Swagger

        :param created_at: The created_at of this Fetch.  # noqa: E501
        :type created_at: str
        :param updated_at: The updated_at of this Fetch.  # noqa: E501
        :type updated_at: str
        :param comment: The comment of this Fetch.  # noqa: E501
        :type comment: str
        :param id: The id of this Fetch.  # noqa: E501
        :type id: int
        :param user_email: The user_email of this Fetch.  # noqa: E501
        :type user_email: str
        :param protocol: The protocol of this Fetch.  # noqa: E501
        :type protocol: str
        :param host: The host of this Fetch.  # noqa: E501
        :type host: str
        :param port: The port of this Fetch.  # noqa: E501
        :type port: int
        :param tls: The tls of this Fetch.  # noqa: E501
        :type tls: bool
        :param username: The username of this Fetch.  # noqa: E501
        :type username: str
        :param password: The password of this Fetch.  # noqa: E501
        :type password: str
        """
        self.swagger_types = {
            'created_at': str,
            'updated_at': str,
            'comment': str,
            'id': int,
            'user_email': str,
            'protocol': str,
            'host': str,
            'port': int,
            'tls': bool,
            'username': str,
            'password': str
        }

        self.attribute_map = {
            'created_at': 'created_at',
            'updated_at': 'updated_at',
            'comment': 'comment',
            'id': 'id',
            'user_email': 'user_email',
            'protocol': 'protocol',
            'host': 'host',
            'port': 'port',
            'tls': 'tls',
            'username': 'username',
            'password': 'password'
        }

        self._created_at = created_at
        self._updated_at = updated_at
        self._comment = comment
        self._id = id
        self._user_email = user_email
        self._protocol = protocol
        self._host = host
        self._port = port
        self._tls = tls
        self._username = username
        self._password = password

    @classmethod
    def from_dict(cls, dikt) -> 'Fetch':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The fetch of this Fetch.  # noqa: E501
        :rtype: Fetch
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self) -> str:
        """Gets the created_at of this Fetch.


        :return: The created_at of this Fetch.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: str):
        """Sets the created_at of this Fetch.


        :param created_at: The created_at of this Fetch.
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def updated_at(self) -> str:
        """Gets the updated_at of this Fetch.


        :return: The updated_at of this Fetch.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at: str):
        """Sets the updated_at of this Fetch.


        :param updated_at: The updated_at of this Fetch.
        :type updated_at: str
        """

        self._updated_at = updated_at

    @property
    def comment(self) -> str:
        """Gets the comment of this Fetch.


        :return: The comment of this Fetch.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment: str):
        """Sets the comment of this Fetch.


        :param comment: The comment of this Fetch.
        :type comment: str
        """

        self._comment = comment

    @property
    def id(self) -> int:
        """Gets the id of this Fetch.


        :return: The id of this Fetch.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Fetch.


        :param id: The id of this Fetch.
        :type id: int
        """

        self._id = id

    @property
    def user_email(self) -> str:
        """Gets the user_email of this Fetch.


        :return: The user_email of this Fetch.
        :rtype: str
        """
        return self._user_email

    @user_email.setter
    def user_email(self, user_email: str):
        """Sets the user_email of this Fetch.


        :param user_email: The user_email of this Fetch.
        :type user_email: str
        """

        self._user_email = user_email

    @property
    def protocol(self) -> str:
        """Gets the protocol of this Fetch.


        :return: The protocol of this Fetch.
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol: str):
        """Sets the protocol of this Fetch.


        :param protocol: The protocol of this Fetch.
        :type protocol: str
        """

        self._protocol = protocol

    @property
    def host(self) -> str:
        """Gets the host of this Fetch.


        :return: The host of this Fetch.
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host: str):
        """Sets the host of this Fetch.


        :param host: The host of this Fetch.
        :type host: str
        """

        self._host = host

    @property
    def port(self) -> int:
        """Gets the port of this Fetch.


        :return: The port of this Fetch.
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port: int):
        """Sets the port of this Fetch.


        :param port: The port of this Fetch.
        :type port: int
        """

        self._port = port

    @property
    def tls(self) -> bool:
        """Gets the tls of this Fetch.


        :return: The tls of this Fetch.
        :rtype: bool
        """
        return self._tls

    @tls.setter
    def tls(self, tls: bool):
        """Sets the tls of this Fetch.


        :param tls: The tls of this Fetch.
        :type tls: bool
        """

        self._tls = tls

    @property
    def username(self) -> str:
        """Gets the username of this Fetch.


        :return: The username of this Fetch.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username: str):
        """Sets the username of this Fetch.


        :param username: The username of this Fetch.
        :type username: str
        """

        self._username = username

    @property
    def password(self) -> str:
        """Gets the password of this Fetch.


        :return: The password of this Fetch.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password: str):
        """Sets the password of this Fetch.


        :param password: The password of this Fetch.
        :type password: str
        """

        self._password = password
